/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormPadrao.java
 *
 * Created on Nov 4, 2011, 8:12:28 AM
 *
 * @author rebonatto
 */

package Visualizacao;

import Graficos.CriaGrafico;
import Uteis.Conversoes;
import Uteis.CalendarComboBox;
import Visualizacao.FormFiltroEquip;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import modelo.CapturaAtual;
import modelo.Equipamento;
import modelo.OndaPadrao;
import modelo.TipoPadrao;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import persistencia.CapturaAtualDAO;
import persistencia.EquipamentoDAO;
import persistencia.OndaPadraoDAO;
import persistencia.TipoPadraoDAO;

/**
 *
 * @author rebonatto
 */
public class FormPadrao extends javax.swing.JDialog {
    private OndaPadraoDAO dao = new OndaPadraoDAO();
    private CapturaAtualDAO capdao = new CapturaAtualDAO();
    private OndaPadrao bean = new OndaPadrao();
    private CapturaAtual cap = new CapturaAtual();
    private EquipamentoDAO eqpdao = new EquipamentoDAO();
    private TipoPadraoDAO tipdao = new TipoPadraoDAO();
    
    Vector titulosPadrao = new Vector();
    Vector linhasPadrao = new Vector();

    Vector titulosOndas = new Vector();
    Vector linhasOndas = new Vector();

    
    /** Creates new form FormEquipamento */
    public FormPadrao(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        //preenche o combobox
        comboTipoPadrao.removeAllItems();
        for (TipoPadrao tip : tipdao.lista()) {
            comboTipoPadrao.addItem((TipoPadrao) tip);
        }
        
        comboCadEquipamento.removeAllItems();        
        comboConEquipamento.removeAllItems();
        for (Equipamento equip : eqpdao.lista()) {
            comboCadEquipamento.addItem((Equipamento) equip);
            comboConEquipamento.addItem((Equipamento) equip);
        }

        setTitle("Cadastro de Tipos de Padrão de Onda");
        
        if (montaTabelaPadrao() == 0) {
            JOptionPane.showMessageDialog(this, "Tabela Vazia");
        }
        
        montaTabelaOndas() ;         
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoOndas = new javax.swing.ButtonGroup();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        tabConsulta = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaPadrao = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jtfConEquipamento = new javax.swing.JTextField();
        comboConEquipamento = new javax.swing.JComboBox();
        radioEquip = new javax.swing.JCheckBox();
        panelPadraoOnda = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        panelPadraoHarmonicas = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        btnAtualizaOndasPadrao = new javax.swing.JButton();
        tabCadastro = new javax.swing.JPanel();
        comboData = new CalendarComboBox();
        jLabel3 = new javax.swing.JLabel();
        jtfCadEquipamento = new javax.swing.JTextField();
        comboTipoPadrao = new javax.swing.JComboBox();
        btnFiltrar1 = new javax.swing.JButton();
        btnLimparFiltro = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelaOndas = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        panelOnda = new javax.swing.JPanel();
        panelHarmonicas = new javax.swing.JPanel();
        btnGravarPadrao = new javax.swing.JButton();
        comboCadEquipamento = new javax.swing.JComboBox();
        radioFase = new javax.swing.JCheckBox();
        radioDiferencial = new javax.swing.JCheckBox();
        radioData = new javax.swing.JCheckBox();
        btnCarregaOndas = new javax.swing.JButton();
        btnConfirma = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        tabelaPadrao.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaPadrao.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaPadraoMouseClicked(evt);
            }
        });
        tabelaPadrao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaPadraoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaPadrao);

        jLabel4.setText("Equipamento:");

        jtfConEquipamento.setEnabled(false);
        jtfConEquipamento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfConEquipamentoFocusLost(evt);
            }
        });

        comboConEquipamento.setEditable(true);
        comboConEquipamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboConEquipamento.setEnabled(false);
        comboConEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboConEquipamentoActionPerformed(evt);
            }
        });

        radioEquip.setText("Escolher um Equipamento");
        radioEquip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioEquipActionPerformed(evt);
            }
        });

        panelPadraoOnda.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelPadraoOnda.setPreferredSize(new java.awt.Dimension(240, 220));

        jLabel7.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel7.setText("Forma de Onda");

        panelPadraoHarmonicas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelPadraoHarmonicas.setPreferredSize(new java.awt.Dimension(240, 220));

        jLabel5.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel5.setText("Componente DC e Harmônicas");

        btnAtualizaOndasPadrao.setText("Atualiza Tabela");
        btnAtualizaOndasPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAtualizaOndasPadraoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout tabConsultaLayout = new javax.swing.GroupLayout(tabConsulta);
        tabConsulta.setLayout(tabConsultaLayout);
        tabConsultaLayout.setHorizontalGroup(
            tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabConsultaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1353, Short.MAX_VALUE)
                    .addGroup(tabConsultaLayout.createSequentialGroup()
                        .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(radioEquip)
                            .addGroup(tabConsultaLayout.createSequentialGroup()
                                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, 0)
                                .addComponent(jtfConEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(8, 8, 8)
                                .addComponent(comboConEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, 234, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(41, 41, 41)
                                .addComponent(btnAtualizaOndasPadrao)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(tabConsultaLayout.createSequentialGroup()
                .addGap(150, 150, 150)
                .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabConsultaLayout.createSequentialGroup()
                        .addGap(140, 140, 140)
                        .addComponent(jLabel7)
                        .addGap(331, 331, 331)
                        .addComponent(jLabel5))
                    .addGroup(tabConsultaLayout.createSequentialGroup()
                        .addComponent(panelPadraoOnda, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(20, 20, 20)
                        .addComponent(panelPadraoHarmonicas, javax.swing.GroupLayout.PREFERRED_SIZE, 480, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        tabConsultaLayout.setVerticalGroup(
            tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(tabConsultaLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(radioEquip)
                .addGap(18, 18, 18)
                .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(tabConsultaLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jLabel4))
                    .addComponent(jtfConEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(comboConEquipamento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAtualizaOndasPadrao)))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7)
                    .addComponent(jLabel5))
                .addGap(9, 9, 9)
                .addGroup(tabConsultaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelPadraoOnda, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelPadraoHarmonicas, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(39, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Consulta", tabConsulta);

        tabCadastro.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboData.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboData.setEnabled(false);
        tabCadastro.add(comboData, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 124, -1));

        jLabel3.setText("Equipamento:");
        tabCadastro.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 20, 110, -1));

        jtfCadEquipamento.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jtfCadEquipamentoFocusLost(evt);
            }
        });
        tabCadastro.add(jtfCadEquipamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 10, 62, -1));

        comboTipoPadrao.setEditable(true);
        comboTipoPadrao.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboTipoPadrao.setEnabled(false);
        comboTipoPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTipoPadraoActionPerformed(evt);
            }
        });
        tabCadastro.add(comboTipoPadrao, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 260, 234, -1));

        btnFiltrar1.setText("FiltrarEquipamento");
        btnFiltrar1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFiltrar1ActionPerformed(evt);
            }
        });
        tabCadastro.add(btnFiltrar1, new org.netbeans.lib.awtextra.AbsoluteConstraints(730, 10, 160, -1));

        btnLimparFiltro.setText("Limpar Filtro");
        btnLimparFiltro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparFiltroActionPerformed(evt);
            }
        });
        tabCadastro.add(btnLimparFiltro, new org.netbeans.lib.awtextra.AbsoluteConstraints(900, 10, 130, -1));

        tabelaOndas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaOndas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaOndasMouseClicked(evt);
            }
        });
        tabelaOndas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaOndasKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tabelaOndas);

        tabCadastro.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 880, 180));

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel6.setText("Forma de Onda");
        tabCadastro.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(170, 340, -1, -1));

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel2.setText("Componente DC e Harmônicas");
        tabCadastro.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 340, -1, -1));

        panelOnda.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelOnda.setPreferredSize(new java.awt.Dimension(240, 220));
        tabCadastro.add(panelOnda, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 370, 480, 370));

        panelHarmonicas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelHarmonicas.setPreferredSize(new java.awt.Dimension(240, 220));
        tabCadastro.add(panelHarmonicas, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 370, 480, 370));

        btnGravarPadrao.setText("GravarPadrão");
        btnGravarPadrao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGravarPadraoActionPerformed(evt);
            }
        });
        tabCadastro.add(btnGravarPadrao, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 260, -1, -1));

        comboCadEquipamento.setEditable(true);
        comboCadEquipamento.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboCadEquipamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCadEquipamentoActionPerformed(evt);
            }
        });
        tabCadastro.add(comboCadEquipamento, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 10, 234, -1));

        radioFase.setSelected(true);
        radioFase.setText("Fase");
        tabCadastro.add(radioFase, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 90, -1, -1));

        radioDiferencial.setSelected(true);
        radioDiferencial.setText("Diferencial");
        tabCadastro.add(radioDiferencial, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 120, -1, -1));

        radioData.setText("Selecionar Data");
        radioData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioDataActionPerformed(evt);
            }
        });
        tabCadastro.add(radioData, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 10, -1, -1));

        btnCarregaOndas.setText("Carregar Ondas");
        btnCarregaOndas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregaOndasActionPerformed(evt);
            }
        });
        tabCadastro.add(btnCarregaOndas, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 160, -1, 30));

        btnConfirma.setText("Confirma");
        btnConfirma.setEnabled(false);
        btnConfirma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmaActionPerformed(evt);
            }
        });
        tabCadastro.add(btnConfirma, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 260, -1, -1));

        jTabbedPane1.addTab("Cadastro", tabCadastro);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1385, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
           
    private void tabelaPadraoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaPadraoKeyReleased
        // TODO add your handling code here:
         if (tabelaPadrao.getSelectedRow() != -1) {         
            //System.out.println(tabelaPadrao.getSelectedRow());
            this.tabelaPadraoMouseClicked(null);
        }
    }//GEN-LAST:event_tabelaPadraoKeyReleased

    private void jtfCadEquipamentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfCadEquipamentoFocusLost
        // TODO add your handling code here:
        if (jtfCadEquipamento.getText().isEmpty()){
            comboCadEquipamento.setSelectedIndex(-1);
            return;
        }
        int codEquipamento = Integer.parseInt(jtfCadEquipamento.getText());
        Equipamento eqp = eqpdao.localiza(codEquipamento);
        if (eqp == null) {
            JOptionPane.showMessageDialog(null, "Equipamento não encontrado");
            if(comboCadEquipamento.getSelectedIndex() != -1){
                eqp = (Equipamento) comboCadEquipamento.getSelectedItem();
                jtfCadEquipamento.setText(String.valueOf(eqp.getCodEquip()));
            }
            return;
        } else {
            comboCadEquipamento.setSelectedItem((Equipamento)eqp);
        }
    }//GEN-LAST:event_jtfCadEquipamentoFocusLost

    private void comboTipoPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTipoPadraoActionPerformed
        // TODO add your handing code here:
        TipoPadrao tip = new TipoPadrao();
        if (comboTipoPadrao.getSelectedIndex() != -1) {
            tip = (TipoPadrao) comboTipoPadrao.getSelectedItem();
            jtfCadEquipamento.setText(String.valueOf(tip.getCodTipoPadrao()));
        }
    }//GEN-LAST:event_comboTipoPadraoActionPerformed

    private void tabelaOndasMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaOndasMouseClicked
        // TODO add your handling code here:
        int linha = tabelaOndas.getSelectedRow();

        if (linha == -1){
            JOptionPane.showMessageDialog(null, "Equipamento sem Ondas Cadastradas");
            return;
        }        
               
        cap = capdao.localiza((Integer) tabelaOndas.getValueAt(linha, 0));
        
        atualizaGraficos(cap, panelOnda, panelHarmonicas);
    }//GEN-LAST:event_tabelaOndasMouseClicked

    private void tabelaOndasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaOndasKeyReleased
        // TODO add your handling code here:
        if (tabelaOndas.getSelectedRow() != -1) {
            this.tabelaOndasMouseClicked(null);
        }
    }//GEN-LAST:event_tabelaOndasKeyReleased

    private void comboCadEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCadEquipamentoActionPerformed
        // TODO add your handling code here:
        Equipamento eqp = new Equipamento();
        if (comboCadEquipamento.getSelectedIndex() != -1) {
            eqp = (Equipamento) comboCadEquipamento.getSelectedItem();
            jtfCadEquipamento.setText(String.valueOf(eqp.getCodEquip()));
        }        

    }//GEN-LAST:event_comboCadEquipamentoActionPerformed

    private void jtfConEquipamentoFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jtfConEquipamentoFocusLost
        // TODO add your handling code here:        
        System.out.println("Entrou perda de foco");
        if (jtfConEquipamento.getText().isEmpty()){
            comboConEquipamento.setSelectedIndex(-1);
            return;
        }
        int codEquipamento = Integer.parseInt(jtfConEquipamento.getText());
        Equipamento eqp = eqpdao.localiza(codEquipamento);
        
        if (eqp == null) {
            JOptionPane.showMessageDialog(null, "Equipamento não encontrado");
            if(comboConEquipamento.getSelectedIndex() != -1){
                eqp = (Equipamento) comboConEquipamento.getSelectedItem();
                jtfConEquipamento.setText(String.valueOf(eqp.getCodEquip()));
            }
            return;
        } else {
            comboConEquipamento.setSelectedItem((Equipamento) eqp);            
        }   
    }//GEN-LAST:event_jtfConEquipamentoFocusLost

    private void comboConEquipamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboConEquipamentoActionPerformed
        // TODO add your handling code here:
        Equipamento eqp = new Equipamento();
        if (comboConEquipamento.getSelectedIndex() != -1) {
            eqp = (Equipamento) comboConEquipamento.getSelectedItem();
            jtfConEquipamento.setText(String.valueOf(eqp.getCodEquip()));
        }        
        
    }//GEN-LAST:event_comboConEquipamentoActionPerformed

    private void radioEquipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioEquipActionPerformed
        // TODO add your handling code here:
        if (radioEquip.isSelected()){
            jtfConEquipamento.setEnabled(true);
            comboConEquipamento.setEnabled(true);
            btnAtualizaOndasPadrao.setEnabled(true);
        }
        else{
            atualizaTabelaPadrao(null);
            jtfConEquipamento.setEnabled(false);
            comboConEquipamento.setEnabled(false);            
            btnAtualizaOndasPadrao.setEnabled(false);
        }
    }//GEN-LAST:event_radioEquipActionPerformed

    private void radioDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioDataActionPerformed
        // TODO add your handling code here:
        if (radioData.isSelected()){
            comboData.setEnabled(true);            
        }
        else{
            comboData.setEnabled(false);            
        }
    }//GEN-LAST:event_radioDataActionPerformed

    private void tabelaPadraoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaPadraoMouseClicked
        // TODO add your handling code here:
        int linha = tabelaPadrao.getSelectedRow();

        if (linha == -1){
            JOptionPane.showMessageDialog(null, "Equipamento sem Ondas Cadastradas");
            return;
        }        
               
        bean = dao.localiza((Integer) tabelaPadrao.getValueAt(linha, 0));
        
        atualizaGraficos(bean, panelPadraoOnda, panelPadraoHarmonicas);
    }//GEN-LAST:event_tabelaPadraoMouseClicked

    private void btnLimparFiltroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparFiltroActionPerformed
        // TODO add your handling code here:
        comboCadEquipamento.removeAllItems();
        for (Equipamento equip : eqpdao.lista()) {
            comboCadEquipamento.addItem((Equipamento) equip);
        }
    }//GEN-LAST:event_btnLimparFiltroActionPerformed

    private void btnFiltrar1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFiltrar1ActionPerformed
        // TODO add your handling code here:

        FormFiltroEquip.ObjFiltroEquip obj = FormFiltroEquip.abreFormulario();

        if ( (obj.isSelTipo()) || obj.isSelMarca() || obj.isSelModelo()){
            comboCadEquipamento.removeAllItems();
            if (! obj.isSelTipo())
            obj.setCodTipo(null);
            if (! obj.isSelMarca())
            obj.setCodMarca(null);
            if (! obj.isSelModelo())
            obj.setCodModelo(null);

            for (Equipamento equip : eqpdao.lista(obj.getCodTipo(), obj.getCodMarca(), obj.getCodModelo())) {
                comboCadEquipamento.addItem((Equipamento) equip);
            }
        }
    }//GEN-LAST:event_btnFiltrar1ActionPerformed

    private void btnCarregaOndasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregaOndasActionPerformed
        // TODO add your handling code here:
        atualizaTabelaOndas();
    }//GEN-LAST:event_btnCarregaOndasActionPerformed

    private void btnAtualizaOndasPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAtualizaOndasPadraoActionPerformed
        // TODO add your handling code here:
        Equipamento eqp = (Equipamento) comboConEquipamento.getSelectedItem();
        atualizaTabelaPadrao(eqp);
    }//GEN-LAST:event_btnAtualizaOndasPadraoActionPerformed

    private void btnGravarPadraoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGravarPadraoActionPerformed
        // TODO add your handling code here:
        comboTipoPadrao.setEnabled(true);
        btnConfirma.setEnabled(true);
    }//GEN-LAST:event_btnGravarPadraoActionPerformed

    private void btnConfirmaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmaActionPerformed
        // TODO add your handling code here:
        int linha = tabelaOndas.getSelectedRow();
        int cod;

        if (linha == -1){
            JOptionPane.showMessageDialog(null, "Deve ser selecionada uma Captura");
            return;
        }        
               
        cap = capdao.localiza((Integer) tabelaOndas.getValueAt(linha, 0));        
                
        if (comboTipoPadrao.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(null, "Deve ser selecionado o Tipo de Padrao da Onda");
            return;            
        }
        
        TipoPadrao tip = new TipoPadrao();        
        tip = (TipoPadrao) comboTipoPadrao.getSelectedItem();
        
        dao.Insere(cap, tip);
        btnConfirma.setEnabled(false);
        
        cod = Integer.valueOf(jtfConEquipamento.getText());
        if ( (! radioEquip.isSelected() == true) || (  (cod == cap.getCodEquip().getCodEquip()) && (radioEquip.isSelected() == true) ) ){
        //atualiza a tabela dos padroes inseridos
            cod = dao.ultimaChave();
            bean = dao.localiza(cod);
            addTabelaPadrao(bean);
        }
        
    }//GEN-LAST:event_btnConfirmaActionPerformed

    private void atualizaGraficos (Object bean, JPanel panelOnda, JPanel panelHarmonicas){
        // Monta grafico da Onda        
        final JFreeChart chart = CriaGrafico.createChartLinhas(bean, false);
        final ChartPanel crtPanelOnda = new ChartPanel(chart);
        crtPanelOnda.setPreferredSize(new java.awt.Dimension(500, 370));
        
//        crtPanelOnda.setVisible(true);
//        crtPanelOnda.setSize(panelOnda.getWidth(), panelOnda.getHeight());
        
        panelOnda.removeAll();
        panelOnda.add(crtPanelOnda);
        panelOnda.revalidate();
        panelOnda.repaint();
                        
        // monta grafico de barras
        ChartPanel crtPanelBarras = new ChartPanel(CriaGrafico.createChartBarras(bean, false, true));
        crtPanelBarras.setPreferredSize(new java.awt.Dimension(500, 370));
        
        //crtPanelBarras.setVisible(true);
        //crtPanelBarras.setSize(panelHarmonicas.getWidth(), panelHarmonicas.getHeight());
        panelHarmonicas.removeAll();
        panelHarmonicas.add(crtPanelBarras);
        panelHarmonicas.revalidate();
        panelHarmonicas.repaint();
    }

    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FormPadrao dialog = new FormPadrao(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private int montaTabelaPadrao() {
        //Ajusta titulos da tabela
        titulosPadrao.add("Código");        
        titulosPadrao.add("Equipamento");
        titulosPadrao.add("TipoPadrao");
        titulosPadrao.add("Sala");
        titulosPadrao.add("Tomada");
        titulosPadrao.add("Data");        
        titulosPadrao.add("Valor Medio");
        titulosPadrao.add("Eficaz");                
        
        atualizaTabelaPadrao(null);
        
        tabelaPadrao.setModel(new DefaultTableModel(linhasPadrao, titulosPadrao));

        return (linhasPadrao.size());
    }

    private void atualizaTabelaPadrao(Equipamento eqp){
        // inicializa os dados da tabela
        
        linhasPadrao.clear();
        tabelaPadrao.removeAll();        
        if (eqp == null){
            for (OndaPadrao op : dao.lista()) {
                addTabelaPadrao(op);
            }
        }
        else{
            for (OndaPadrao op : dao.lista(eqp)) {
                addTabelaPadrao(op);
            }
        }
        tabelaPadrao.revalidate();                
    }    
    
    private void addTabelaPadrao(OndaPadrao p) {
        Vector colunas = new Vector();
        
        colunas.add(p.getCodOndaPadrao());
        colunas.add(p.getCodEquip());
        colunas.add(p.getCodTipoPadrao());
        colunas.add(p.getCodTomada().getCodSala());
        colunas.add(p.getCodTomada());
        colunas.add(Conversoes.CalendarToTimeStamp(p.getDataPadrao()));
        colunas.add(p.getValorMedio());
        colunas.add(p.getEficaz());

        linhasPadrao.add(colunas);
    }
    
    private int montaTabelaOndas() {
        //Ajusta titulos da tabela
        titulosOndas.add("Código");        
        titulosOndas.add("Equipamento");
        titulosOndas.add("Evento");
        titulosOndas.add("Sala");
        titulosOndas.add("Tomada");
        titulosOndas.add("Data");        
        titulosOndas.add("Valor Medio");
        titulosOndas.add("Eficaz");                        
        
        tabelaOndas.setModel(new DefaultTableModel(linhasOndas, titulosOndas));

        return (linhasOndas.size());
    }

    private void atualizaTabelaOndas(){
        // inicializa os dados da tabela        
        if ( (! radioDiferencial.isSelected() ) && (! radioFase.isSelected()) ){
            JOptionPane.showMessageDialog(null, "Deve ser selecionado ou Fase ou Diferencial");
            return;
        }
        
        linhasOndas.clear();
        tabelaOndas.removeAll();        
        Equipamento eqp = (Equipamento) comboCadEquipamento.getSelectedItem();               
        
        if (radioData.isSelected()){ //Se tem selecao de data
            String  s = (String) comboData.getSelectedItem();        
            for (CapturaAtual cap : capdao.listacFO(eqp, Conversoes.StringToCalendar(s), radioFase.isSelected(), radioDiferencial.isSelected())) {
                addTabelaOndas(cap);
            }
        }
        else{
            for (CapturaAtual cap : capdao.listacFO(eqp, radioFase.isSelected(), radioDiferencial.isSelected())) {
                addTabelaOndas(cap);
            }
        }
        tabelaOndas.revalidate();                        
    }    
    
    private void addTabelaOndas(CapturaAtual c) {
        Vector colunas = new Vector();
        
        colunas.add(c.getCodCaptura());
        colunas.add(c.getCodEquip());
        colunas.add(c.getCodEvento());
       // colunas.add(c.getCodTipoOnda());
        colunas.add(c.getCodTomada().getCodSala());
        colunas.add(c.getCodTomada());
        colunas.add(Conversoes.CalendarToTimeStamp(c.getDataAtual()));
        colunas.add(c.getValorMedio());
        colunas.add(c.getEficaz());

        linhasOndas.add(colunas);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GrupoOndas;
    private javax.swing.JButton btnAtualizaOndasPadrao;
    private javax.swing.JButton btnCarregaOndas;
    private javax.swing.JButton btnConfirma;
    private javax.swing.JButton btnFiltrar1;
    private javax.swing.JButton btnGravarPadrao;
    private javax.swing.JButton btnLimparFiltro;
    private javax.swing.JComboBox comboCadEquipamento;
    private javax.swing.JComboBox comboConEquipamento;
    private javax.swing.JComboBox comboData;
    private javax.swing.JComboBox comboTipoPadrao;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jtfCadEquipamento;
    private javax.swing.JTextField jtfConEquipamento;
    private javax.swing.JPanel panelHarmonicas;
    private javax.swing.JPanel panelOnda;
    private javax.swing.JPanel panelPadraoHarmonicas;
    private javax.swing.JPanel panelPadraoOnda;
    private javax.swing.JCheckBox radioData;
    private javax.swing.JCheckBox radioDiferencial;
    private javax.swing.JCheckBox radioEquip;
    private javax.swing.JCheckBox radioFase;
    private javax.swing.JPanel tabCadastro;
    private javax.swing.JPanel tabConsulta;
    private javax.swing.JTable tabelaOndas;
    private javax.swing.JTable tabelaPadrao;
    // End of variables declaration//GEN-END:variables

}
