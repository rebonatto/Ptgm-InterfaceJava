/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * FormFugas.java
 *
 * Created on Nov 4, 2011, 8:12:28 AM
 *
 * @author rebonatto
 */
package Visualizacao;

import Graficos.CriaGrafico;
import Similaridade.Funcoes;
import Similaridade.GraficosSimilaridade;
import Uteis.Conversoes;
import Uteis.CalendarComboBox;
import Uteis.Configuracoes;
import Uteis.Cores;
import Uteis.FormataNumeros;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Vector;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.CapturaAtual;
import modelo.Formularios.FugasSimultaneas;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import persistencia.CapturaAtualDAO;
import persistencia.FugasDAO;

/**
 *
 * @author rebonatto
 */
public class FormFugasSimultaneas extends javax.swing.JDialog {

    private CapturaAtualDAO capdao = new CapturaAtualDAO();
    private FugasDAO fugdao = new FugasDAO();

    private Vector<CapturaAtual> fugas = new Vector<CapturaAtual>();

    private CapturaAtual bean = new CapturaAtual();

    Vector titulosBanco = new Vector();
    Vector linhasBanco = new Vector();

    Vector titulosFugas = new Vector();
    Vector linhasFugas = new Vector();

    Vector titulosCompara = new Vector();
    Vector linhasCompara = new Vector();

    /**
     * Creates new form FormEquipamento
     */
    public FormFugasSimultaneas(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();

        setTitle("Concurrent Waveforms Comparasion");

        //preenche o combobox       
        Calendar hoje = Calendar.getInstance();
        comboDataFim.setSelectedItem(Conversoes.CalendarToString(hoje));
        comboDataIni.setSelectedItem(Conversoes.CalendarToString(hoje));

        montaTabelaBanco();

        titulosFugas.add("Capture");
        titulosFugas.add("Room");
        titulosFugas.add("Outlet");
        titulosFugas.add("Equipment");
        titulosFugas.add("Mean Value");
        titulosFugas.add("RMS");

        tabelaFugas.setModel(new DefaultTableModel(linhasFugas, titulosFugas));

        titulosCompara.add("Leakage 1");
        titulosCompara.add("Leakage  2");
        titulosCompara.add("Pearson");
        titulosCompara.add("Spearman");
        titulosCompara.add("Shift");

        tabelaCompara.setModel(new DefaultTableModel(linhasCompara, titulosCompara));

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GrupoOndas = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        radioData = new javax.swing.JCheckBox();
        comboDataIni = new CalendarComboBox();
        jLabel5 = new javax.swing.JLabel();
        btnCarregaOndas = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        tabelaBanco = new javax.swing.JTable();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        tabelaCompara = new javax.swing.JTable();
        comboDataFim = new CalendarComboBox();
        jLabel9 = new javax.swing.JLabel();
        panelOnda = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        panelDeslocadas = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        panelHarmonicas = new javax.swing.JPanel();
        jScrollPane7 = new javax.swing.JScrollPane();
        tabelaFugas = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        radioData.setText("Select Date");
        radioData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioDataActionPerformed(evt);
            }
        });
        jPanel1.add(radioData, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, -1, -1));

        comboDataIni.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboDataIni.setEnabled(false);
        jPanel1.add(comboDataIni, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 10, 124, -1));

        jLabel5.setText("To:");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, -1, -1));

        btnCarregaOndas.setText("Collect Waveforms");
        btnCarregaOndas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCarregaOndasActionPerformed(evt);
            }
        });
        jPanel1.add(btnCarregaOndas, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, -1, 30));

        tabelaBanco.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaBanco.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaBancoMouseClicked(evt);
            }
        });
        tabelaBanco.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaBancoKeyReleased(evt);
            }
        });
        jScrollPane5.setViewportView(tabelaBanco);

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 480, 140));

        jLabel11.setText("From:");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, -1, -1));

        tabelaCompara.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabelaCompara.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaComparaMouseClicked(evt);
            }
        });
        tabelaCompara.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tabelaComparaKeyReleased(evt);
            }
        });
        jScrollPane6.setViewportView(tabelaCompara);

        jPanel1.add(jScrollPane6, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 80, 790, 140));

        comboDataFim.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        comboDataFim.setEnabled(false);
        jPanel1.add(comboDataFim, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 10, 124, -1));

        jLabel9.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel9.setText("Waveforms");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 250, -1, 30));

        panelOnda.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelOnda.setPreferredSize(new java.awt.Dimension(240, 220));
        jPanel1.add(panelOnda, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 430, 390));

        jLabel10.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel10.setText("Shift Waveforms");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 250, -1, 30));

        panelDeslocadas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelDeslocadas.setPreferredSize(new java.awt.Dimension(240, 220));
        jPanel1.add(panelDeslocadas, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 280, 430, 390));

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        jLabel4.setText("DC Component and Harmonics");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 260, -1, -1));

        panelHarmonicas.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        panelHarmonicas.setPreferredSize(new java.awt.Dimension(240, 220));
        jPanel1.add(panelHarmonicas, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 280, 430, 390));

        tabelaFugas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane7.setViewportView(tabelaFugas);

        jPanel1.add(jScrollPane7, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 0, 790, 80));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(170, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void radioDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioDataActionPerformed
        // TODO add your handling code here:
        if (radioData.isSelected()) {
            comboDataIni.setEnabled(true);
            comboDataFim.setEnabled(true);
        } else {
            comboDataIni.setEnabled(false);
            comboDataFim.setEnabled(false);
        }

    }//GEN-LAST:event_radioDataActionPerformed

    private void btnCarregaOndasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCarregaOndasActionPerformed
        // TODO add your handling code here:
        atualizaTabelaBanco();
    }//GEN-LAST:event_btnCarregaOndasActionPerformed

    private void tabelaBancoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaBancoMouseClicked
        // TODO add your handling code here:
        int linha = tabelaBanco.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "No leakage found");
            return;
        }

        Timestamp data = (Timestamp) tabelaBanco.getValueAt(linha, 0);

        atualizaTabelaFugas(data);

        atualizaComparacoes();

        atualizaGraficos();

    }//GEN-LAST:event_tabelaBancoMouseClicked

    private void atualizaComparacoes() {
        int i, j;
        linhasCompara.clear();
        tabelaCompara.removeAll();

        List<Double> onda1List = new ArrayList<Double>();
        List<Double> onda2List = new ArrayList<Double>();

        double pearson[], spearman[];

        for (i = 0; i < fugas.size(); i++) {
            for (j = i + 1; j < fugas.size(); j++) {
                onda1List = Funcoes.retListO(fugas.get(i));
                onda2List = Funcoes.retListO(fugas.get(j));

                pearson = Funcoes.pearson(onda1List, onda2List);
                spearman = Funcoes.spearman(onda1List, onda2List);

                Vector colunas = new Vector();

                colunas.add(fugas.get(i));
                colunas.add(fugas.get(j));
                colunas.add(Funcoes.casasDouble(pearson[0], 4));
                colunas.add(Funcoes.casasDouble(spearman[0], 4));
                colunas.add((int) spearman[1]);

                linhasCompara.add(colunas);
            }
        }
        tabelaCompara.repaint();
        tabelaCompara.revalidate();

    }

    private void tabelaBancoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaBancoKeyReleased
        // TODO add your handling code here:
        if (tabelaBanco.getSelectedRow() != -1) {
            this.tabelaBancoMouseClicked(null);
        }
    }//GEN-LAST:event_tabelaBancoKeyReleased

    private void tabelaComparaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaComparaMouseClicked
        // TODO add your handling code here:
        int pos1, pos2;
        int linha = tabelaCompara.getSelectedRow();

        if (linha == -1) {
            JOptionPane.showMessageDialog(null, "No leakage found");
            return;
        }

        CapturaAtual onda1 = (CapturaAtual) tabelaCompara.getValueAt(linha, 0);
        pos1 = Cores.getposicao(tabelaFugas, onda1.getCodCaptura());
        CapturaAtual onda2 = (CapturaAtual) tabelaCompara.getValueAt(linha, 1);
        pos2 = Cores.getposicao(tabelaFugas, onda2.getCodCaptura());

        double correlacao = (double) tabelaCompara.getValueAt(linha, 3); // Spearman
        int deslocamento = (int) tabelaCompara.getValueAt(linha, 4);

        //monta grafico primeira e deslocada        
        final ChartPanel crtPanelOnda;
        crtPanelOnda = new ChartPanel(GraficosSimilaridade.criaGrafico2LinhasComDeslocada(onda1, onda2, deslocamento, correlacao, Cores.getCorGrafico(pos1), Cores.getCorGrafico(pos2)));
        crtPanelOnda.setPreferredSize(new java.awt.Dimension(420, 380));
        panelDeslocadas.removeAll();
        panelDeslocadas.add(crtPanelOnda);
        panelDeslocadas.revalidate();
        panelDeslocadas.repaint();

    }//GEN-LAST:event_tabelaComparaMouseClicked

    private void tabelaComparaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tabelaComparaKeyReleased
        // TODO add your handling code here:
        // TODO add your handling code here:
        if (tabelaCompara.getSelectedRow() != -1) {
            this.tabelaComparaMouseClicked(null);
        }
    }//GEN-LAST:event_tabelaComparaKeyReleased

    private void atualizaGraficos() {
        // Monta grafico das Ondas                
        final JFreeChart chart = CriaGrafico.criaGraficoComparaLinhas(fugas);
        final ChartPanel crtPanelOnda = new ChartPanel(chart);
        crtPanelOnda.setPreferredSize(new java.awt.Dimension(420, 380));

//        crtPanelOnda.setVisible(true);
//        crtPanelOnda.setSize(panelOnda.getWidth(), panelOnda.getHeight());
        panelOnda.removeAll();
        panelOnda.add(crtPanelOnda);
        panelOnda.revalidate();
        panelOnda.repaint();

        // monta grafico das barras
        ChartPanel crtPanelBarras = new ChartPanel(CriaGrafico.criaGraficoComparaBarras(fugas));
        crtPanelBarras.setPreferredSize(new java.awt.Dimension(420, 380));

        //crtPanelBarras.setVisible(true);
        //crtPanelBarras.setSize(panelHarmonicas.getWidth(), panelHarmonicas.getHeight());
        panelHarmonicas.removeAll();
        panelHarmonicas.add(crtPanelBarras);
        panelHarmonicas.revalidate();
        panelHarmonicas.repaint();

        // limpa o grafico das deslocadas
        panelDeslocadas.removeAll();
        panelDeslocadas.revalidate();
        panelDeslocadas.repaint();

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                FormFugasSimultaneas dialog = new FormFugasSimultaneas(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    private int montaTabelaBanco() {
        //Ajusta titulos da tabela
        titulosBanco.add("Date/Time");
        titulosBanco.add("Number");
        titulosBanco.add("Maximum RMS");

        tabelaBanco.setModel(new DefaultTableModel(linhasBanco, titulosBanco));

        tabelaBanco.setAutoCreateRowSorter(true);

        return (linhasBanco.size());
    }

    private void atualizaTabelaBanco() {
        // inicializa os dados da tabela                        
        linhasBanco.clear();
        tabelaBanco.removeAll();

        if (radioData.isSelected()) { //Se tem selecao de data
            String sIni = (String) comboDataIni.getSelectedItem();
            String sFim = (String) comboDataFim.getSelectedItem();

            for (FugasSimultaneas f : fugdao.lista(Conversoes.StringToCalendar(sIni), Conversoes.StringToCalendar(sFim))) {
                addTabelaBanco(f);
            }
        } else {
            for (FugasSimultaneas f : fugdao.listaSimultaneas()) {
                addTabelaBanco(f);
            }
        }

        JOptionPane.showMessageDialog(null, "Were added " + tabelaBanco.getRowCount() + " cases with concurrent leakages");

        tabelaBanco.revalidate();

        // processamento para estatísticas da tese
        /*        
        int i, c0, c1, c2, c3, c4, c5, cont = 0, dois, tres, quatro, v;
        double sim, maior, menor, maiorcorrente, maiorcorrente2, cor;

        CapturaAtual capMaior1, capMaior2, capMenor1, capMenor2;
        Timestamp dataMaior = null;

        maior = Double.MIN_VALUE;
        menor = Double.MAX_VALUE;
        maiorcorrente2 = maiorcorrente =  Double.MIN_VALUE;

        c0 = c1 = c2 = c3 = c4 = c5 = 0;
        String str;

        capMaior1 = capMaior2 = capMenor1 = capMenor2 = null;
        dois = tres = quatro = 0;

        for (i = 0; i < 277; i++) {
            Timestamp data = (Timestamp) tabelaBanco.getValueAt(i, 0);
            str = (String) tabelaBanco.getValueAt(i, 2);
            v = (Integer) tabelaBanco.getValueAt(i, 1);
            if (v == 2)
                dois++;
            else if (v ==  3)
                tres++;
            else if (v == 4)
                quatro++;
            cor = Double.valueOf(str);
            
            if (cor > maiorcorrente){
                maiorcorrente = cor;
                dataMaior = data;
            }

            atualizaTabelaFugas(data);

            atualizaComparacoes();

            for (int j = 0; j < linhasCompara.size(); j++) {

                sim = (double) tabelaCompara.getValueAt(j, 3);
                sim = sim < 0 ? sim * (-1) : sim * 1;

                if (sim > maior) {
                    maior = sim;
                    capMaior1 = (CapturaAtual) tabelaCompara.getValueAt(j, 0);
                    capMaior1 = (CapturaAtual) tabelaCompara.getValueAt(j, 1);
                }

                if (sim == 0) {
                    c0++;
                    if (linhasCompara.size() > 1) {
                        System.out.println("Três");
                    }
                } else {
                    if (sim < menor) {
                        menor = sim;
                        capMenor1 = (CapturaAtual) tabelaCompara.getValueAt(j, 0);                        
                    }
                    if (sim <= 0.499D) {
                        c5++;
                    } else if (sim <= 0.849D) {
                        c4++;
                    } else if (sim <= 0.949D) {
                        c3++;
                    } else if (sim <= 0.999D) {
                      // str = 
                        if (cor > maiorcorrente2){
                            maiorcorrente2 = cor;
                            capMaior2 = (CapturaAtual) tabelaCompara.getValueAt(j, 0);
                        }
                        c2++;
                    } else {
                        c1++;
                    }
                }
                cont++;

            }
        }

        System.out.println("Eventos simultaneos:    " + linhasBanco.size());
        System.out.println("Comparações realizadas: " + cont);

        System.out.println("Maior similaridade: " + maior);
        System.out.println("Capturada em " + Conversoes.CalendarToStringDH(capMaior1.getDataAtual()));
        System.out.println("Menor similaridade: " + menor);
        System.out.println("Capturada em " + Conversoes.CalendarToStringDH(capMenor1.getDataAtual()));
        
        System.out.println("Maior corrente simultanea: " + maiorcorrente);
        System.out.println("Capturada em: " + dataMaior);

        System.out.println("Comparacoes 0: " + c0);
        System.out.println("Máxima       : " + c1);
        System.out.println("Alta         : " + c2);
        System.out.println("Média        : " + c3);
        System.out.println("Baixa        : " + c4);
        System.out.println("Mínima       : " + c5);
        
        
        System.out.println("Casos com 2 FO simultaneas: " + dois);
        System.out.println("Casos com 3 FO simultaneas: " + tres);
        System.out.println("Casos com 4 FO simultaneas: " + quatro);
        
        
        System.out.println("Maior corrente simultanea com similaridade alta: " + maiorcorrente2);
        System.out.println("Capturada em " + capMaior2);
        */
    }

    private void addTabelaBanco(FugasSimultaneas f) {

        Vector colunas = new Vector();

        colunas.add(Conversoes.CalendarToTimeStamp(f.getDataAtual()));
        colunas.add(f.getQuantidade());

        colunas.add(FormataNumeros.FormataSignificativos(f.getMaxEficaz(), Configuracoes.DIGITOSSIGNIFICATIVOS));

        linhasBanco.add(colunas);
    }

    private void atualizaTabelaFugas(Timestamp dta) {
        // inicializa os dados da tabela                        
        linhasFugas.clear();
        tabelaFugas.removeAll();
        fugas.removeAllElements();

        for (CapturaAtual f : capdao.listaFugas(dta)) {
            fugas.add(f);
            addTabelaFugas(f);
        }
        tabelaFugas.revalidate();
        tabelaFugas.repaint();
    }

    private void addTabelaFugas(CapturaAtual cap) {

        Vector colunas = new Vector();

        colunas.add(cap.getCodCaptura());
        colunas.add(cap.getCodTomada().getCodSala());
        colunas.add(cap.getCodTomada());
        colunas.add(cap.getCodEquip());

        if (cap.getDataAtual().compareTo(Configuracoes.DATALIMITEVM) < 0) { // Menor que zero significa data da captura e antes de 01/01/2015
            colunas.add((int) cap.getValorMedio() / Configuracoes.PONTOSONDA);
            //System.out.println("Colocou o valor dividio por 256");
        } else {
            colunas.add((int) cap.getValorMedio());
            //System.out.println("Colocou o valor real");
        }

        colunas.add(FormataNumeros.FormataSignificativos(cap.getEficaz(), Configuracoes.DIGITOSSIGNIFICATIVOS));

        linhasFugas.add(colunas);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup GrupoOndas;
    private javax.swing.JButton btnCarregaOndas;
    private javax.swing.JComboBox comboDataFim;
    private javax.swing.JComboBox comboDataIni;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JPanel panelDeslocadas;
    private javax.swing.JPanel panelHarmonicas;
    private javax.swing.JPanel panelOnda;
    private javax.swing.JCheckBox radioData;
    private javax.swing.JTable tabelaBanco;
    private javax.swing.JTable tabelaCompara;
    private javax.swing.JTable tabelaFugas;
    // End of variables declaration//GEN-END:variables

}
